permissions:
  contents: read
  issues: write
  pull-requests: write

name: Type Coverage Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop

jobs:
  type-coverage-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18' # 이 부분은 프로젝트에 맞는 Node.js 버전으로 설정하세요.
      - name: Install Dependencies
        run: npm install
      - name: Calculate Type Coverage
        id: type-coverage
        run: |
          # Run type-coverage and save the output
          COVERAGE=$(npx type-coverage)
          # Base64 encode the coverage result
          COVERAGE_ENCODED=$(echo -n "$COVERAGE" | base64)
          # Set the encoded coverage result as an output variable
          echo "coverage_encoded=$COVERAGE_ENCODED" >> $GITHUB_OUTPUT

      - name: Comment PR with Type Coverage
        uses: actions/github-script@v6
        with:
          script: |
            # Retrieve the base64-encoded coverage result
            COVERAGE_ENCODED="${{ steps.type-coverage.outputs.coverage_encoded }}"
            # Decode the coverage result back to its original form
            COVERAGE=$(echo "$COVERAGE_ENCODED" | base64 --decode)
            # Display the decoded coverage result
            echo "Decoded Coverage Result:"
            echo "$COVERAGE"

            # const coverageResult = `${{ steps.type-coverage.outputs.coverage }}`;
            # const [typedItems, total, percentage] = coverageResult.match(/(\d+) \/ (\d+) (\d+\.\d+%)/).slice(1);

            # const message = `
            # ### 📘 Type Coverage Report

            # | Total Type Checks | Typed Items | Type Coverage Rate |
            # |-------------------|-------------|--------------------|
            # | ${total}          | ${typedItems} | 🔥 **${percentage}**  |
            # `;

            # const prNumber = context.issue.number || context.payload.pull_request?.number;
            # if (!prNumber) {
            #   console.log('PR 번호를 찾을 수 없습니다.');
            #   return;
            # }

            # // PR에 코멘트 추가
            # await github.rest.issues.createComment({
            #   issue_number: prNumber,
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   body: message
            # });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
